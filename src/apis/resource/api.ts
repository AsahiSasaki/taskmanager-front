/* tslint:disable */
/* eslint-disable */
/**
 * TaskManager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface TaskPostBody
 */
export interface TaskPostBody {
    /**
     * 
     * @type {string}
     * @memberof TaskPostBody
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskPostBody
     */
    'description'?: string;
    /**
     * 本日以降の日付をYYYY-MM-DD形式で指定してください。
     * @type {string}
     * @memberof TaskPostBody
     */
    'deadline'?: string;
}
/**
 * 
 * @export
 * @interface TaskPutBody
 */
export interface TaskPutBody {
    /**
     * 
     * @type {number}
     * @memberof TaskPutBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskPutBody
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskPutBody
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof TaskPutBody
     */
    'status'?: TaskPutBodyStatusEnum;
    /**
     * 本日以降の日付をYYYY-MM-DD形式で指定してください。
     * @type {string}
     * @memberof TaskPutBody
     */
    'deadline'?: string;
}

export const TaskPutBodyStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type TaskPutBodyStatusEnum = typeof TaskPutBodyStatusEnum[keyof typeof TaskPutBodyStatusEnum];

/**
 * 
 * @export
 * @interface TaskResponseBody
 */
export interface TaskResponseBody {
    /**
     * 
     * @type {number}
     * @memberof TaskResponseBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskResponseBody
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponseBody
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof TaskResponseBody
     */
    'status'?: TaskResponseBodyStatusEnum;
    /**
     * 本日以降の日付をYYYY-MM-DD形式で指定してください。
     * @type {string}
     * @memberof TaskResponseBody
     */
    'deadline'?: string;
}

export const TaskResponseBodyStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type TaskResponseBodyStatusEnum = typeof TaskResponseBodyStatusEnum[keyof typeof TaskResponseBodyStatusEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary タスク作成
         * @param {TaskPostBody} taskPostBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask: async (taskPostBody: TaskPostBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskPostBody' is not null or undefined
            assertParamExists('createTask', 'taskPostBody', taskPostBody)
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary タスク削除
         * @param {number} id タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTask', 'id', id)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary タスク取得
         * @param {number} id タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskByID: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTaskByID', 'id', id)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary タスク一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary タスク更新
         * @param {number} id タスクID
         * @param {TaskPutBody} taskPutBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: async (id: number, taskPutBody: TaskPutBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTask', 'id', id)
            // verify required parameter 'taskPutBody' is not null or undefined
            assertParamExists('updateTask', 'taskPutBody', taskPutBody)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskPutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary タスク作成
         * @param {TaskPostBody} taskPostBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTask(taskPostBody: TaskPostBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(taskPostBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary タスク削除
         * @param {number} id タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTask(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTask(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary タスク取得
         * @param {number} id タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskByID(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskByID(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTaskByID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary タスク一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskResponseBody>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary タスク更新
         * @param {number} id タスクID
         * @param {TaskPutBody} taskPutBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTask(id: number, taskPutBody: TaskPutBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(id, taskPutBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary タスク作成
         * @param {TaskPostBody} taskPostBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask(taskPostBody: TaskPostBody, options?: any): AxiosPromise<void> {
            return localVarFp.createTask(taskPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary タスク削除
         * @param {number} id タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTask(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary タスク取得
         * @param {number} id タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskByID(id: number, options?: any): AxiosPromise<TaskResponseBody> {
            return localVarFp.getTaskByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary タスク一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks(options?: any): AxiosPromise<Array<TaskResponseBody>> {
            return localVarFp.getTasks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary タスク更新
         * @param {number} id タスクID
         * @param {TaskPutBody} taskPutBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(id: number, taskPutBody: TaskPutBody, options?: any): AxiosPromise<void> {
            return localVarFp.updateTask(id, taskPutBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary タスク作成
     * @param {TaskPostBody} taskPostBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTask(taskPostBody: TaskPostBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTask(taskPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary タスク削除
     * @param {number} id タスクID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTask(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTask(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary タスク取得
     * @param {number} id タスクID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTaskByID(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTaskByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary タスク一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTasks(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTasks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary タスク更新
     * @param {number} id タスクID
     * @param {TaskPutBody} taskPutBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTask(id: number, taskPutBody: TaskPutBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateTask(id, taskPutBody, options).then((request) => request(this.axios, this.basePath));
    }
}



